buildscript {
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}
apply plugin: 'java'
apply plugin: 'org.spongepowered.mixin'

version = "${project.mod_version}-${project.mc_version}"
group = 'com.mikitellurium.telluriumsrandomstuff'
archivesBaseName = 'telluriumsrandomstuff'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

mixin {
    add sourceSets.main, "telluriumsrandomstuff.refmap.json"
    config "mixins.telluriumsrandomstuff.json"
}

minecraft {

    //mappings channel: 'official', version: '1.19.3'
    mappings channel: 'parchment', version: '2023.03.12-1.19.3' //Parchment mappings

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'telluriumsrandomstuff'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                telluriumsrandomstuff {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'telluriumsrandomstuff'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                telluriumsrandomstuff {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'telluriumsrandomstuff'

            mods {
                telluriumsrandomstuff {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'telluriumsrandomstuff', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                telluriumsrandomstuff {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()

    maven {
        name = 'Sponge / Mixin'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        // JEI
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // JEI mirror (for fallback)
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        //The One Probe
        url = 'https://maven.k-4u.nl'
    }
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.19.3-44.1.22'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly fg.deobf("mezz.jei:jei-1.19.3-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-1.19.3-forge-api:${jei_version}")
	runtimeOnly fg.deobf("mezz.jei:jei-1.19.3-forge:${jei_version}")  // at runtime, use the full JEI jar
	implementation fg.deobf(project.dependencies.create("mcjty.theoneprobe:theoneprobe:${top_version}") {
    transitive = false
	})

}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "Tellurium's Random Stuff",
                "Specification-Vendor"    : "Miki Tellurium",
                "Specification-Version"   : "${mod_version}-${mc_version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Miki Tellurium",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
